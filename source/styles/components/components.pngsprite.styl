// @stylint off
$menu-name = 'menu';
$menu-x = 42px;
$menu-y = 0px;
$menu-offset-x = -42px;
$menu-offset-y = 0px;
$menu-width = 18px;
$menu-height = 12px;
$menu-total-width = 60px;
$menu-total-height = 26px;
$menu-image = '../images/sprite.png';
$menu = 42px 0px -42px 0px 18px 12px 60px 26px '../images/sprite.png' 'menu';
$photo-name = 'photo';
$photo-x = 0px;
$photo-y = 0px;
$photo-offset-x = 0px;
$photo-offset-y = 0px;
$photo-width = 34px;
$photo-height = 26px;
$photo-total-width = 60px;
$photo-total-height = 26px;
$photo-image = '../images/sprite.png';
$photo = 0px 0px 0px 0px 34px 26px 60px 26px '../images/sprite.png' 'photo';
$menu-2x-name = 'menu@2x';
$menu-2x-x = 84px;
$menu-2x-y = 0px;
$menu-2x-offset-x = -84px;
$menu-2x-offset-y = 0px;
$menu-2x-width = 36px;
$menu-2x-height = 24px;
$menu-2x-total-width = 120px;
$menu-2x-total-height = 52px;
$menu-2x-image = '..images/sprite@2x.png';
$menu-2x = 84px 0px -84px 0px 36px 24px 120px 52px '..images/sprite@2x.png' 'menu@2x';
$photo-2x-name = 'photo@2x';
$photo-2x-x = 0px;
$photo-2x-y = 0px;
$photo-2x-offset-x = 0px;
$photo-2x-offset-y = 0px;
$photo-2x-width = 68px;
$photo-2x-height = 52px;
$photo-2x-total-width = 120px;
$photo-2x-total-height = 52px;
$photo-2x-image = '..images/sprite@2x.png';
$photo-2x = 0px 0px 0px 0px 68px 52px 120px 52px '..images/sprite@2x.png' 'photo@2x';
$spritesheet-width = 60px;
$spritesheet-height = 26px;
$spritesheet-image = '../images/sprite.png';
$spritesheet-sprites = $menu $photo;
$spritesheet = 60px 26px '../images/sprite.png' $spritesheet-sprites;
$retina-spritesheet-width = 120px;
$retina-spritesheet-height = 52px;
$retina-spritesheet-image = '..images/sprite@2x.png';
$retina-spritesheet-sprites = $menu-2x $photo-2x;
$retina-spritesheet = 120px 52px '..images/sprite@2x.png' $retina-spritesheet-sprites;

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retinaSprite` and `retinaSprites`.
*/
$menu-group-name = 'menu';
$menu-group = 'menu' $menu $menu-2x;
$photo-group-name = 'photo';
$photo-group = 'photo' $photo $photo-2x;
$retina-groups = $menu-group $photo-group;

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/

sprite-width($sprite) {
  width: $sprite[4];
}

sprite-height($sprite) {
  height: $sprite[5];
}

sprite-position($sprite) {
  background-position: $sprite[2] $sprite[3];
}

sprite-image($sprite) {
  background-image: url($sprite[8]);
}

sprite($sprite) {
  sprite-image($sprite)
  sprite-position($sprite)
  sprite-width($sprite)
  sprite-height($sprite)
}
sprite-background-size($sprite) {
  background-size: $sprite[6] $sprite[7];
}

/*
The `retinaSprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon_home_group = 'icon-home' $icon_home $icon_home_2x;

.retina-sprite-home {
  retina-sprite($icon_home_group)
}
*/
retina-sprite($retina_group) {
  $normal_sprite = $retina_group[1];
  $retina_sprite = $retina_group[2];
  sprite($normal_sprite)

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    sprite-image($retina_sprite)
    sprite-background-size($normal_sprite)
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet-sprites);
*/

sprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .sprite-{$sprite_name} {
      sprite($sprite);
    }
  }
}

/*
The `retinaSprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in Stylus

retina-sprites($retina-groups);
*/


retina-sprites($retina_groups) {
  for $retina_group in $retina_groups {
    $sprite_name = $retina_group[0];
    .retina-sprite-{$sprite_name} {
      retina-sprite($retina_group);
    }
  }
}

// @stylint on

